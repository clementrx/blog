print("hell")
reticulate::repl_python()
reticulate::py_install('pandas', pip = TRUE)
reticulate::repl_python()
reticulate::py_module_available("pandas").
reticulate::py_module_available("pandas")
reticulate::py_install("pandas")
reticulate::py_module_available("pandas")
py_install("pandas")
#| label: read-data
#| echo: true
#| message: false
#| cache: true
lemurs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-08-24/lemur_data.csv')
#| label: wrangling
#| echo: true
#| message: false
#| output-location: slide
library(dplyr)
library(knitr)
lemur_data <- lemurs %>%
filter(taxon == "ECOL",
sex == "M",
age_category == "adult") %>%
select(c(age_at_wt_mo, weight_g)) %>%
rename(Age = age_at_wt_mo,
Weight = weight_g)
kable(head(lemur_data))
reticulate::repl_python()
x = sample(1:100, size = 1000, replace = TRUE)
y = rnorm(1000, mean = 40, sd = 2)
plot(x, y)
reticulate::repl_python()
library(reticulate)
py_install("pandas")
py_install("pandas")
py_config()
?py_install()
py_install("pandas", envname = "/Library/Frameworks/Python.framework/Versions/3.12/bin/python3.12")
library(reticulate)
py_config()
py_install("pandas", envname = "/Users/clementrieux/.virtualenvs/r-reticulate/bin/python")
py_install("pandas")
reticulate::repl_python()
reticulate::repl_python()
py_install("sklearn")
py_install("scikit-learn")
py_install("seaborn")
py_install("matplotlib")
reticulate::repl_python()
library(ggplot2)
print("Matrice de confusion R:")
table(Prédit = data$pred, Réel = data$true)
set.seed(123)
n <- 100
data <- data.frame(
true = factor(rep(c("chien", "chat"), each = 50)),
probs = c(runif(50, 0.5, 1), runif(50, 0, 0.5))
)
data$pred <- factor(ifelse(data$probs > 0.5, "chien", "chat"))
library(ggplot2)
print("Matrice de confusion R:")
table(Prédit = data$pred, Réel = data$true)
conf_matrix_r <- as.data.frame(table(data$pred, data$true))
names(conf_matrix_r) <- c("Prediction", "Real", "Count")
ggplot(conf_matrix_r,
aes(x = Real, y = Prediction, fill = Count)) +
geom_tile() +
geom_text(aes(label = Count)) +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
labs(title = "Matrice de confusion (R)")
data
set.seed(123)
n <- 100
data <- data.frame(
true = factor(rep(c("chien", "chat"), each = 50)),
probs = c(runif(50, 0.5, 1), runif(50, 0, 0.5))
)
data$pred <- factor(ifelse(data$probs > 0.5, "chien", "chat"))
indices_erreurs <- sample(1:n, 15)
data$probs[indices_erreurs] <- 1 - data$probs[indices_erreurs]
data$pred[indices_erreurs] <- ifelse(
data$pred[indices_erreurs] == "chien",
"chat", "chien"
)
library(ggplot2)
print("Matrice de confusion R:")
table(Prédit = data$pred, Réel = data$true)
conf_matrix_r <- as.data.frame(table(data$pred, data$true))
names(conf_matrix_r) <- c("Prediction", "Real", "Count")
ggplot(conf_matrix_r,
aes(x = Real, y = Prediction, fill = Count)) +
geom_tile() +
geom_text(aes(label = Count)) +
scale_fill_gradient(low = "white", high = "steelblue") +
theme_minimal() +
labs(title = "Matrice de confusion (R)")
reticulate::repl_python()
acc_simple <- mean(data$pred == data$true)
print(paste("Accuracy (simple):", round(acc_simple, 3)))
library(caret)
conf_matrix_caret <- confusionMatrix(data$pred, data$true)
print("Précision par classe (caret):")
print(conf_matrix_caret$byClass["Precision"])
conf_matrix <- table(Prédit = data$pred, Réel = data$true)
precision_chat <- conf_matrix["chat","chat"] / sum(conf_matrix[,"chat"])
precision_chien <- conf_matrix["chien","chien"] / sum(conf_matrix[,"chien"])
print("\nPrécision par classe (manuel):")
print(paste("Chat:", round(precision_chat, 3)))
print(paste("Chien:", round(precision_chien, 3)))
precision_moy <- mean(c(precision_chat, precision_chien))
print(paste("\nPrécision moyenne:", round(precision_moy, 3)))
reticulate::repl_python()
roc_auc <- roc(data$true == "chien", data$probs)$auc
library(pROC)
roc_auc <- roc(data$true == "chien", data$probs)$auc
cat(sprintf("ROC-AUC: %.3f\n", roc_auc))
reticulate::repl_python()
mcc_value <- mcc(data$pred, data$true)
library(MLmetrics)
mcc_value <- mcc(data$pred, data$true)
library(mltools)
mcc_value <- mcc(data$pred, data$true)
cat(sprintf("Matthews Correlation Coefficient (MCC): %.3f\n", mcc_value))
reticulate::repl_python()
library(pROC)
roc_auc <- roc(data$true == "chien", data$probs)$auc
cat(sprintf("ROC-AUC: %.3f\n", roc_auc))
roc_curve <- roc(data$true == "chien", data$probs)
plot(roc_curve, main = "Courbe ROC", col = "blue")
legend("bottomright", legend = paste("AUC =", round(roc_auc, 2)), col = "blue", lty = 1)
all.equal(data, data_python)  # Comparer avec le DataFrame généré en Python si vous avez exporté les données.
reticulate::repl_python()
