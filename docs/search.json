[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Clément Rieux",
    "section": "",
    "text": "0 min\n\n\n\n\n\n\n  \n\n\n\n\n\nGet and plot imdb data\n\n\n\n\nscraping\n\n\nplot\n\n\nhttr\n\n\nWeb Scraping\n\n\n \n\n\n\n\nMar 20, 2023\n\n\nClément Rieux\n\n\n7 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "Posts",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nWeb scraping and tv show analysis\n\n\nGet and plot imdb data\n\n\n7 min\n\n\n\nscraping\n\n\nplot\n\n\nhttr\n\n\nWeb Scraping\n\n\n\n\nMar 20, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/2023-03-tv-show-plot/index.html",
    "href": "posts/2023-03-tv-show-plot/index.html",
    "title": "Web scraping and tv show analysis",
    "section": "",
    "text": "Hello !\nWeb scraping has revolutionized the way we collect data from the internet, providing us with valuable insights that were once difficult to obtain.\nIn recent years, web scraping has become increasingly popular in the entertainment industry, particularly when it comes to gathering data on TV show ratings and reviews.\nBy using web scraping tools, it is now possible to collect large amounts of data on a wide range of TV shows and analyze the data to identify patterns and trends. In this article, we will explore how web scraping can be used to collect TV show data, and how we can use this data to gain insights into the popularity and success of different shows.\nWe will also discuss how we can visualize the data using various tools and techniques to help us better understand the information we have gathered. Whether you are a TV enthusiast, a data analyst, or simply someone interested in learning more about the power of web scraping, this article will provide you with valuable insights and practical advice."
  },
  {
    "objectID": "posts/2023-03-tv-show-plot/index.html#where-can-i-find-the-data",
    "href": "posts/2023-03-tv-show-plot/index.html#where-can-i-find-the-data",
    "title": "Web scraping and tv show analysis",
    "section": "Where can I find the data ?",
    "text": "Where can I find the data ?\nActually, it’s pretty easy to find rating of tv shows. imdb provides us all the data we need.\nFor example, if I’m looking data for Breaking Bad :\n\n\n\n\n\nI can get multiples informations :\n\nEpisode Name\nRating\nNumber of votes\nDate\nSypnosis\n\nIf I’m looking at the url : https://www.imdb.com/title/tt0903747/episodes?season=1, we have :\n\ntt0903747: Alias for the serie\nepisodes?season=1: Season number"
  },
  {
    "objectID": "posts/2023-03-tv-show-plot/index.html#how-can-i-get-the-data",
    "href": "posts/2023-03-tv-show-plot/index.html#how-can-i-get-the-data",
    "title": "Web scraping and tv show analysis",
    "section": "How can i get the data ?",
    "text": "How can i get the data ?\n\nLoad library\n\nlibrary(rvest) # manipulate HTML\nlibrary(stringr) # text manipulation\nlibrary(lubridate) # date manipulation\nlibrary(dplyr) # df manipulation\nlibrary(tidyr) # column manipulation\nlibrary(RColorBrewer) # color\nlibrary(ggplot2) # visualization\n\n\n\nInit the variables\n\n# Tv show title\nserie_title = 'Breaking Bad'\n\n# Seasons\ns = 5\n\n# Tv show code\ncode = 'tt0903747'\n\n# setup dataframe\ntable = data.frame()\n\n\n\nLoop to get informations for each season\nFor each season (webpage), we will get informations for each episode.\n\nGet the url\nDownload the .html page (we can also do it without downloading the page, but I prefer to retrieve the page locally\nExtract element, for this i use the extension SelectorGadget\nAppend in the dataframe\n\n\nfor(i in 1:s){\n  \n  url = paste0(\"https://www.imdb.com/title/\",code,\"/episodes?season=\",i)\n  \n  while(TRUE){\n    dl_file <- try(download.file(as.character(url), destfile = \"temp.html\", quiet=TRUE),\n                   silent=TRUE)\n    if(!is(dl_file, 'try-error')) break\n  }\n  \n  html_page <- read_html(\"temp.html\")\n  \n  saison = i\n  \n  episode <- html_page %>% \n    html_nodes(\"#episodes_content strong a\") %>% \n    html_text() %>% \n    str_replace_all(\"\\t|\\n|\", \"\")\n  \n  note <- html_page %>% \n    html_nodes(\".ipl-rating-star.small .ipl-rating-star__rating\") %>% \n    html_text() %>% \n    str_replace_all(\"\\t|\\n|\", \"\")\n  \n  vote <- html_page %>% \n    html_nodes(\".ipl-rating-star__total-votes\") %>% \n    html_text() %>% \n    str_replace_all(\"\\t|\\n|\", \"\")\n  \n  date <- html_page %>% \n    html_nodes(\".airdate\") %>% \n    html_text() %>% \n    str_replace_all(\"\\t|\\n|\", \"\") %>% \n    dmy() %>% \n    as.character()\n  \n  temp_table <- as.data.frame(cbind(saison, episode, note, vote, date))\n  table <- rbind(table,temp_table) \n  \n  file.remove('temp.html')\n  \n}\n\nPerfect ! Now we have a well table\n\n\n\n\n\nsaison\nepisode\nnote\nvote\ndate\n\n\n\n\n1\nPilot\n9.0\n(38,402)\n2010-10-09\n\n\n1\nCat’s in the Bag…\n8.6\n(28,004)\n2008-01-27\n\n\n1\n…And the Bag’s in the River\n8.7\n(27,112)\n2008-02-10\n\n\n1\nCancer Man\n8.2\n(26,140)\n2008-02-17\n\n\n1\nGray Matter\n8.3\n(25,674)\n2008-02-24\n\n\n1\nCrazy Handful of Nothin’\n9.3\n(30,175)\n2008-03-02"
  },
  {
    "objectID": "posts/2023-03-tv-show-plot/index.html#what-can-i-do-with-the-data",
    "href": "posts/2023-03-tv-show-plot/index.html#what-can-i-do-with-the-data",
    "title": "Web scraping and tv show analysis",
    "section": "What can I do with the data ?",
    "text": "What can I do with the data ?\nI use the code from z3tt for his TidyTuesday plot from The Office, which I find very cool.\nFirstly, we need to compute some informations that will be used to make a graph :\n\nEpisode number\nNote by season\nRating mean\n\n\ndf_avg <-\n  table %>% \n  group_by(saison) %>% \n  mutate(episode = row_number(),\n         saison = as.numeric(saison),\n         note = as.numeric(note),\n         vote = gsub(',','',vote),\n         vote = as.numeric(gsub(\"[^\\\\d]+\", \"\", vote, perl=TRUE))\n  ) %>% \n  ungroup() %>% \n  arrange(saison, episode) %>% \n  mutate(episode_id = row_number()) %>% \n  group_by(saison) %>% \n  mutate(\n    avg = mean(note),\n    episode_mod = episode_id + (9 * saison),\n    mid = mean(episode_mod)\n  ) %>% \n  ungroup() %>% \n  mutate(saison = factor(saison))\n\nSecondly, for each season summarize the rating :\n\ndf_lines <-\n  df_avg %>% \n  group_by(saison) %>% \n  summarize(\n    start_x = min(episode_mod) -5,\n    end_x = max(episode_mod) + 5,\n    y = unique(avg)\n  ) %>% \n  pivot_longer(\n    cols = c(start_x, end_x),\n    names_to = \"type\",\n    values_to = \"x\"\n  ) %>% \n  mutate(\n    x_group = if_else(type == \"start_x\", x + .1, x - .1),\n    x_group = if_else(type == \"start_x\" & x == min(x), x_group - .1, x_group),\n    x_group = if_else(type == \"end_x\" & x == max(x), x_group + .1, x_group)\n  )\n\nThen plot :\n\nnb.cols <- s\nmycolors <- colorRampPalette(brewer.pal(8, \"Paired\"))(nb.cols)\n\ndf_avg %>%\n  ggplot(aes(episode_mod, note)) +\n  geom_hline(\n    data = tibble(y = 7:11),\n    aes(yintercept = y),\n    color = \"grey82\",\n    size = .5\n  ) +\n  geom_segment(aes(\n    xend = episode_mod,\n    yend = avg,\n    color = saison,\n    color = after_scale(colorspace::lighten(color, .2))\n  )) +\n  geom_line(data = df_lines,\n            aes(\n              x_group,\n              y,\n              color = saison,\n              color = after_scale(colorspace::darken(color, .2))\n            ),\n            size = 2.5) +\n  geom_point(aes(size = vote,\n                 color = saison)) +\n  geom_label(\n    aes(\n      mid,\n      10.2,\n      label = glue::glue(\" Saison {saison} \"),\n      color = saison,\n      color = after_scale(colorspace::darken(color, .2))\n    ),\n    show.legend = FALSE,\n    fill = NA,\n    label.padding = unit(.2, \"lines\"),\n    label.r = unit(.25, \"lines\"),\n    label.size = .5\n  )  +\n  scale_x_continuous(expand = c(.015, .015)) +\n  scale_y_continuous(\n    expand = c(.03, .03),\n    limits = c(6.5, 10.5),\n    breaks = seq(6.5, 10, by = .5),\n    sec.axis = dup_axis(name = NULL)\n  ) +\n  scale_color_manual(values = mycolors, guide = \"none\") +\n  scale_size_binned(\n    name = \"Votes per episode\",\n    range = c(.3, 6),\n    labels = function(x)\n      format(x, big.mark = \" \", scientific = FALSE)\n  ) +\n  ggtitle(serie_title) +\n  labs(x = \"\", y = \"Rating\",\n       caption = \"Visualization by Clément Rieux\") +\n  guides(\n    size = guide_bins(\n      show.limits = T,\n      direction = \"horizontal\",\n      title.position = \"top\",\n      title.hjust = .5\n    )\n  ) +\n  theme(\n    legend.position = c(.2, .085),\n    legend.key.size = unit(1, 'cm'),\n    legend.key.width = unit(2, \"lines\"),\n    legend.text = element_text(\n      angle = 60,\n      vjust = 1,\n      hjust = 1\n    ),\n    axis.ticks.x = element_blank(),\n    axis.text.x = element_blank()\n  )\n\n\n\n\nWe can also look at the evolution over time :\n\ndf_avg %>% \n  mutate(date = as.Date(date)) %>%  \n  ggplot(aes(x = date, y = note, color = note)) +\n  geom_point() +\n  scale_colour_gradient(low = \"#E84D23\", high = \"#3CDE0B\", na.value = NA) + \n  scale_x_date(date_breaks = \"3 month\", date_labels = \"%b-%Y\") + \n  theme_classic() + \n  theme(axis.text.x = element_text(angle = 70, hjust = 1)) \n\n\n\n\nNow you are able to retrieve data from imdb and do analysis yourself !"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Clément Rieux",
    "section": "",
    "text": "Hi!\nMy name is Clément, and I am Data Scientist from France.\nI’m a fan of R and use it daily.\nI have a master’s degree in economics from the Toulouse School of Economis, and I have been working for Epsilon France since 2019 as consultant.\nMy personal projects are about horse racing in France."
  },
  {
    "objectID": "about-fr.html",
    "href": "about-fr.html",
    "title": "Clément Rieux",
    "section": "",
    "text": "Bonjour!\nJe m’appelle Clément, et je suis Data Scientist en France.\nJe suis un fan de R et je l’utilise quotidiennement.\nJ’ai un Master d’Economie de Toulouse School of Economis, et je travaille pour Epsilon France depuis 2019 en tant que consultant.\nMes projets personnels sont axés sur les courses de chevaux en France."
  }
]