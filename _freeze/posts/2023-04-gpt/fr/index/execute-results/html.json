{
  "hash": "662226db5ad8f16e245231cb652ec54f",
  "result": {
    "markdown": "---\ntitle: \"Utiliser Chat GPT avec R\"\nsubtitle: \"Library (gptstudio)\"\ndraft: FALSE\nauthor: [\"Clément Rieux\"]\ncategories: [\"gpt\", \"chat GPT\", \"addins\"]\ndate: \"2023-01-01\"\nimage: \"brain.jpg\"\ntoc: true\n---\n\n\n\n\n## Introduction\n\nL'utilisation de l'intelligence artificielle (IA) pour diverses applications est en constante évolution ces dernières années. Avec l'émergence de la génération de langage naturel assistée par l'IA, il est maintenant possible de développer des systèmes qui peuvent comprendre et générer du texte de manière similaire à un humain. Dans cette optique, l'API Chat GPT développée par [OpenAI](https://openai.com/) est devenue une ressource précieuse pour les développeurs qui cherchent à incorporer cette technologie dans leurs projets.\n\nEn utilisant la library [gptstudio](https://github.com/MichelNivard/gptstudio), les développeurs peuvent facilement accéder à l'API Chat GPT et utiliser cette puissante technologie pour améliorer leurs applications. Dans cet article, nous allons explorer l'utilisation de la bibliothèque pour faire appel à l'API Chat GPT et discuter des avantages qu'elle peut apporter aux projets de développement de langage naturel.\n\n## Installation\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"gptstudio\")\n```\n:::\n\n\nUne fois la library installée, nous avons besoin d'une API Key qu'on va récupérer sur notre [compte OpenAI](https://platform.openai.com/account/api-keys).\n\nCette API Key on peut la définir manuellement :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.setenv(OPENAI_API_KEY = \"<APIKEY>\")\n```\n:::\n\n\nOu l'ajouter dans notre fichier .Renvion en ouvrant l'éditeur :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(usethis)\nedit_r_environ(scope = \"project\")\n```\n:::\n\n\nPuis en ajoutant notre Key :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nOPENAI_API_KEY= \"<APIKEY>\"\n```\n:::\n\n\n## Utilisation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gptstudio)\n```\n:::\n\n\nLes addins de cette library permettent plusieurs choses\n\n-   Echanger directement avec Chat GPT\n\n-   Modifier du code directement en source selon ce que l'on souhaite\n\n-   Vérifier la grammaire\n\n-   Commenter du code dans une sélection\n\nPetit bémol, le package est configuré en anglais, donc quand j'utilise l'addin des commentaires (très pratique), il va me commenter le code en Anglais. Comment faire si je veux l'avoir en Français ou dans une autre langue ?\n\nOn va donc éditer le package :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrace(addin_comment_code, edit = T)\n```\n:::\n\n\nCela va nous ouvrir une popup :\n\n![](edit1.png){fig-align=\"center\"}\n\nEt il nous suffit de remplacer la ligne de l'appel à l'API par un input en Français ou la langue désirée :\n\n![](edit2.png){fig-align=\"center\"}\n\n> A noter que le changement est temporaire (uniquement le temps de la session R). Pour changer définitivement la fonction il faut prendre la source du package, modifier le code et installer le package avec sa propre source, et/ou contribuer au développement du package.\n\nUne fois que tout est configuré, il ne reste plus qu'à coder (ou regarder la library coder pour nous).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}